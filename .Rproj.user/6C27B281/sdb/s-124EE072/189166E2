{
    "contents" : "#' A lookup for various regression methods\n#'\n#' This function allows you to lookup which package/method corresponds to a given regression method. Returns a data frame\n#'  with the package and method that each method matches up with, as well as a short description of each method. \n#' @keywords reference\n#' @export\n#' @examples\n#' lm_ref()\n\nlm_ref <- function() {\n  types <- c(\"GLS\", \"LAD\", \"Huber\", \"LTS\", \"PLS\", \"PCR\", \"Ridge\")\n  pkgs <- c(\"nlme\", \"quantreg\", \"MASS\", \"MASS\", \"pls\", \"pls\", \"MASS\")  \n  funcs <- c(\"gls\", \"rq\", \"rlm\", \"ltsreg\", \"plsr\", \"pcr\", \"lm.ridge\")\n  dscp <- c(\"errors can be correlated or have unequal variances\",\n            \"quantile regression\",\n            \"robust regression\",\n            \"fit a model that avoids the outliers\",\n            \"partial least squares\", \n            \"principal component analysis + regression\",\n            \"ridge regression\")\n  \n  ref <- data.frame(method = types, package = pkgs, func = funcs, descriptions = dscp)\n  return (ref)\n}\n\n#' A wrapper for partial least squares regression. \n#'\n#' Does partial least squares. \n#' @param lin_mod A linear model of class 'lm'\n#' @param ncomp The number of components to consider in the PLS regression\n#' @keywords pls\n#' @export\n#' @examples\n#' my_pls(lm(resp ~ predictor), ncomp =2)\n\nmy_pls <- function(lin_mod, ncomp=5) {\n  partial_ls <- pls::plsr(formula(lin_mod), data=lin_mod$model, validation=\"CV\",ncomp=ncomp)\n  pls::validationplot(partial_ls)\n  return (partial_ls)\n}\n\n#' A wrapper for principal component regression\n#'\n#' Does PCR the easy way\n#' @param lin_mod A linear model of class 'lm'\n#' @keywords pcr\n#' @export\n#' @examples\n#' my_pcr(lm(resp ~ predictor))\n\nmy_pcr <- function(lin_mod) {\n  pcr_model <- pls::pcr(formula(lin_mod), data=lin_mod$model, validation=\"CV\")\n  pls::validationplot(pcr_model)\n  return (pcr_model)\n}\n\n#' A wrapper for ridge regression\n#'\n#' Ridge regression made easy\n#' @param lin_mod A linear model of class 'lm'\n#' @param lam The lambda values to consider for ridge regression\n#' @keywords ridge\n#' @export\n#' @examples\n#' my_ridge(lm(resp ~ predictor))\nmy_ridge <- function(lin_mod, lam=seq(0, 100, .01)) {\n  ridge <- MASS::lm.ridge(formula(lin_mod), data = lin_mod$model, lambda=lam)\n  select(ridge)\n  return (ridge)\n}\n\n#' Broken stick regression\n#'\n#' One class broken stick regression\n#' @param response The response variable (a vector)\n#' @param predictor The predictor variable (a vector)\n#' @param split.point The point to split the broken stick regression\n#' @keywords broken stick\n#' @export\n#' @examples\n#' broken_stick(response, predictor, 50)\nbroken_stick <- function(response, predictor, split.point) {\n  lhs <- function(x) ifelse(x < split.point, split.point -x, 0)\n  rhs <- function(x) ifelse(x < split.point, 0, x - split.point)\n  \n  broken.stick <- lm(response ~ lhs(predictor) + rhs(predictor))\n  return (data.frame(summary(broken.stick)))\n}\n\n#' Stepwise Regression wrapper\n#'\n#' This function allows you to perform stepwise regression in three different ways\n#' @param mod The linear model of class 'lm'\n#' @param type The type of stepwise regression. Default is AIC but other options include \"Adj-R\" for adjusted \n#'  r-squared, and \"Mallows\" for mallows critical point \n#' @keywords stepwise\n#' @export\n#' @examples\n#' stepwise(lm(resp~pred, data), type = \"Adj-R\")\nstepwise <- function(mod, type = \"AIC\") {\n  adj.r <- function(form) summary(leaps::regsubsets(form, data = mod$model))$adjr2\n  mallow <- function(form) summary(leaps::regsubsets(form, data = mod$model))$cp\n  switch(type,\n         AIC = return(step(model)),\n         AdjR = return(adj.r(formula(mod))),\n         Mallows = return(mallow(formula(mod)))\n        )\n}\n\n",
    "created" : 1420623387304.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4270350600",
    "id" : "189166E2",
    "lastKnownWriteTime" : 1422130153,
    "path" : "~/Dropbox/R/my_tools/R/lm_tools.R",
    "project_path" : "R/lm_tools.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}