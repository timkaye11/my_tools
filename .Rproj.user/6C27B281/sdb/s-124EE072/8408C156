{
    "contents" : "#' A R function that calls the Yahoo Finance API to get data into a data frame\n#'\n#' This function allows you to specify a stock ticker and date ranges such that the data is grabbed from the\n#' yahoo finance API. The output is a data.frame of all of the information returned. \n#'\n#' @param ticker The stock ticker for a given company\n#' @param date.from The start date for the stock data (year month date format)\n#' @param date.to The end date for the stock date (year month date format)\n#' @keywords finance\n#' @export\n#' @examples\n#' data <- yahoo_finance(\"goog\")\n#' plot.ts(data$Adj.Close)\n#' \nyahoo_finance <- function(ticker, date.from=\"2015-01-01\", data.to=Sys.Date()) {\n  ticker <- toupper(ticker)\n  base <- \"http://ichart.yahoo.com/table.csv?s=\"\n  \n  # to handle multiple tickers, if ticker is a vector\n  request_link <- paste(base, paste(ticker, collapse=\",\"), \"&\", sep=\"\")\n  \n  # format the dates according to the yahoo finance API\n  date.from <- lubridate::ymd(date.from)\n  date.to <- lubridate::ymd(date.to)\n  from <- c(month(date.from)-1, day(date.from), year(date.from))\n  to <- c(month(date.to)-1, day(date.to), year(date.to))\n  dates <- paste(letters[1:6], c(from,to), sep=\"=\", collapse=\"&\")\n  \n  # link for the request\n  link <- paste(request_link, dates, sep=\"\")\n  \n  output <- httr::GET(link)\n  stopifnot(output$status_code != 200)\n  csv <- read.csv(textConnection(content(output, \"text\")))\n  \n  return (csv)\n}\n\n#' A R function that calculates the discrete continuous growth rate of a stock\n#'\n#' This function allows you to specify a stock ticker and date ranges such that the data is grabbed from the\n#' yahoo finance API. The output consists of the mean dcgr and the a vector of the logged differences\n#'\n#' @param ticker The stock ticker for a given company\n#' @param from The start date for the stock data (year month date format)\n#' @param to The end date for the stock date (year month date format)\n#' @keywords finance, dcgr\n#' @export\n#' @examples\n#' dcgr <- calculate_dcgr(\"goog\")\n#' \ncalculate_dcgr <- function(ticker,  from=(Sys.Date()-365), to=Sys.Date()) {\n  data <- yahoo_finance(ticker, from, to)\n  adj <- data$Adj.Close\n  # discrete continuous growth rate (dcgr)\n  dcgr <- rep(0, nrow(data))\n  dcgr[1] <- 0\n  for (i in 2:length(adj)) {\n    dcgr[i] <- log(adj[i]) - log(adj[i-1])\n  }\n  output <- list()\n  output$mean_dcgr <- mean(dcgr)\n  output$dcgr <- dcgr\n  return (output)\n}\n\n#' A R function that calls calculates the Implied Daily Volatility (IDV) of a stock\n#'\n#' This function calculates the IDV using the Black-Scholes method. The user must specify the strike\n#' price, the stock price, the interest rate, time until execution, option price (call or put), and the type \n#' of option (call or put)\n#'\n#' @param strike The strike price of astock\n#' @param stock_price The stock price of the stock\n#' @param interest The interest rate \n#' @param time The time until execution of the option\n#' @param option_price The price of the option\n#' @keywords finance, idv\n#' @export\n#' @examples\n#' call_idv <- calculate_idv(113, 111.5, 0.02, 17, 3.50, \"call\")\n#' \ncalculate_idv <- function(strike, stock_price, interest, time, option_price, type=\"call\") {\n  switch(type,\n         call=.idv_call(strike, stock_price, interest, time, option_price),\n         put =.idv_put(strike, stock_price, interest, time, option_price))\n}\n\n# helper function for the calculate IDV function above (only for calls)\n.idv_call <- function(strike_price, stock_price, interest, time, call_price) {\n  # now do some black-scholes stuff\n  S <- stock_price\n  K <- strike\n  r <- interest\n  t <- time\n  \n  daily_vol <- 0\n  temp_call_price <- 0\n  call <- call_price\n  while (temp_call_price <= call) {\n    daily_vol <- daily_vol + 0.000001\n    denom1 <- ((log(S) - log(K)) + ((r / 365) + (daily_vol^2/2))*t)\n    denom2 <- ((log(S) - log(K)) + ((r / 365) - (daily_vol^2/2))*t)\n    dur_vol <- daily_vol * sqrt(t)\n    dnd1 <- pnorm(denom1/dur_vol)\n    dnd1 <- pnorm(denom2/dur_vol)\n    ringer <- exp(-r*t/365)\n    temp_call_price <- S * dnd1 - K*ringer*dnd2\n  }\n  output <- list()\n  output$time_decay <- (S*dnd1*daily_vol) / (2*sqrt(t)) - (-r*K*exp(-r*t) * dnd2)\n  output$daily_vol <- daily_vol\n  return (output)\n}\n\n# helper function for the IDV calculator above (only for puts)\n.idv_put <- function(strike_price, stock_price, interest, time, put_price) {\n  S <- stock_price\n  K <- strike_price\n  r <- interest\n  t <- time\n  \n  daily_vol <- 0\n  temp_put_price <- 0\n  put <- put_price\n  while (temp_put_price <= put) {\n    daily_vol <- daily_vol + 0.00001\n    denom <- ((log(S) - log(K)) + ((-r/365) + (daily_vol^2/2))*t)\n    denom2 <- ((log(S) - log(K)) + ((-r/365) - (daily_vol^2/2))*t)\n    durvol <- daily_vol * sqrt(t)\n    dnd1 <- pnorm(-(denom)/durvol)\n    dnd2 <- pnorm(-(denom2)/ durvol)\n    ringer <- exp(-r * t/365)\n    temp_put_price <- -(S * dnd1 - K*ringer*dnd2)\n  }\n  output <- list()\n  output$time_decay <- (S*dnd1*daily_vol) / (2*sqrt(t)) - (-r*K*exp(-r*t) * dnd2)\n  output$daily_vol <- daily_vol\n  return (output)\n}\n\n#' A R function that calculates a bunch of relevant portfolio statistics, given an array of stock tickers\n#'\n#' This function calculates portfolio variance & volatility, portfolio and annualized alpha, \n#' unweighted variance/volatility, and the correlation matrix. \n#' \n#'\n#' @param tickers A vector of stock tickers (the portfolio). \n#' @param ratios The ratios of the stocks in the portfolio. A vcetor\n#' @keywords finance, portfolio, variance\n#' @export\n#' @examples\n#' my_portfolio <- portfolio_analysis(tickers=c(\"SPY\", \"AAPL\", \"GOOG\", \"GLD\"), \n#'                                    ratios=c(0.5,0.2,0.2,0.1))\n#' \nportfolio_analysis <- function(tickers, ratios=rep(1/length(tickers), length(tickers))) {\n  # get all the stock prices from yahoo finance\n  portfolio <- NULL\n  for (ticker in tickers) {\n    portfolio <- cbind(portfolio, yahoo_finance(ticker)$Adj.Close)\n  }\n  portfolio_df <- as.data.frame(portfolio)\n  colnames(portfolio_df) <- tickers\n  \n  # correlation, covariance matrix\n  portfolio_correlation <- as.data.frame(cor(portfolio_df))\n  portfolio_covariance <- as.data.frame(cov(portfolio_df))\n  \n  # evaluate the dcgr for each of the stocks in the portflio  \n  dcgr <- function(x) { \n    dd <- rep(0, length(x))\n    for (i in 2:length(x)) {\n      dd[i] <- log(x[i]) - log(x[i-1])\n    }\n    return ((dd))\n  }\n  dcgrs <- apply(portfolio, 2, dcgr)\n  mean_dcgrs <- apply(dcgrs, 2, mean)\n  var_dcgrs <- apply(dcgrs, 2, var)\n  \n  # put all relevant information into the output\n  output <- list()\n  output$cor_matrix <- porfolio_correlation\n  output$portfolio_alpha <- mean_dcgrs * ratios\n  output$annualized_alpha <- output$portfolio_alpha * 251\n  output$unweighted_variance <- sum(mean_dcgrs) + sum(porfolio_covariance)\n  output$unweighted_volatility <- sqrt(output$unweighted_variance)\n  output$portfolio_variance <- sum((1/length(tickers)^2 * var_dcgrs))\n  output$portfolio_volatility <- sqrt(output$portfolio_variance)\n  return (output)   \n}",
    "created" : 1420646260496.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3662368213",
    "id" : "8408C156",
    "lastKnownWriteTime" : 1422130168,
    "path" : "~/Dropbox/R/my_tools/R/finance_tools.R",
    "project_path" : "R/finance_tools.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}